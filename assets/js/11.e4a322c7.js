(window.webpackJsonp=window.webpackJsonp||[]).push([[11],{395:function(s,t,a){"use strict";a.r(t);var e=a(54),n=Object(e.a)({},(function(){var s=this,t=s.$createElement,a=s._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h3",{attrs:{id:"正则"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#正则"}},[s._v("#")]),s._v(" 正则")]),s._v(" "),a("h5",{attrs:{id:"基础"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#基础"}},[s._v("#")]),s._v(" 基础")]),s._v(" "),a("ul",[a("li",[s._v("汉字："),a("code",[s._v("[\\u4e00-\\u9fa5]")])]),s._v(" "),a("li",[s._v("数字："),a("code",[s._v("[0-9]")]),s._v("、"),a("code",[s._v("\\d")])]),s._v(" "),a("li",[s._v("非数字："),a("code",[s._v("[^0-9]")]),s._v("、"),a("code",[s._v("\\D")])]),s._v(" "),a("li",[s._v("英文、数字、下划线: "),a("code",[s._v("[a-zA-Z0-9_]")]),s._v("、"),a("code",[s._v("\\w")])]),s._v(" "),a("li",[s._v("非英文、数字、下划线: "),a("code",[s._v("[^a-zA-Z0-9_]")]),s._v("、"),a("code",[s._v("\\W")])]),s._v(" "),a("li",[s._v("空白字符: "),a("code",[s._v("\\s")])]),s._v(" "),a("li",[s._v("非空白字符："),a("code",[s._v("\\S")])]),s._v(" "),a("li",[s._v("空格换行："),a("code",[s._v("\\n\\t")])]),s._v(" "),a("li",[s._v("任意字符："),a("code",[s._v(".")])]),s._v(" "),a("li",[s._v("特殊字符需要加 "),a("code",[s._v("\\")]),s._v(" 进行转义")])]),s._v(" "),a("h5",{attrs:{id:"数量词"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#数量词"}},[s._v("#")]),s._v(" 数量词")]),s._v(" "),a("ul",[a("li",[s._v("正好出现n次："),a("code",[s._v("{n}")])]),s._v(" "),a("li",[s._v("最少n，最多m："),a("code",[s._v("{n,m}")])]),s._v(" "),a("li",[s._v("至少n，最多不限："),a("code",[s._v("{n,}")])]),s._v(" "),a("li",[s._v("至少出现1次："),a("code",[s._v("+")])]),s._v(" "),a("li",[s._v("可有可无："),a("code",[s._v("?")])]),s._v(" "),a("li",[s._v("不限制："),a("code",[s._v("*")])])]),s._v(" "),a("h5",{attrs:{id:"标志符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#标志符"}},[s._v("#")]),s._v(" 标志符：")]),s._v(" "),a("ul",[a("li",[a("code",[s._v("i")]),s._v(": 不区分大小写")]),s._v(" "),a("li",[a("code",[s._v("g")]),s._v("：全局匹配（所有匹配项都能够被找到。如果没有，将会在找到第一个匹配项后停止）")]),s._v(" "),a("li",[a("code",[s._v("m")]),s._v(": 多行匹配\n（改变了插入符号和美元符号的含义。在多行模式下，它们代表一行的开头和结尾，而不是整个字符串）")]),s._v(" "),a("li",[a("code",[s._v("^")]),s._v(": 以什么开头（用在方括号中时表示 非）")]),s._v(" "),a("li",[s._v("$: 以什么结束")])]),s._v(" "),a("h5",{attrs:{id:"子表达式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#子表达式"}},[s._v("#")]),s._v(" 子表达式")]),s._v(" "),a("ul",[a("li",[s._v("圆括号里的部分我们可以看作是一个子表达式。")])]),s._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" reg"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token regex"}},[a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[s._v("/")]),a("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[s._v("(\\d)([a-z]*)")]),a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[s._v("/")]),a("span",{pre:!0,attrs:{class:"token regex-flags"}},[s._v("gi")])]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//(\\d)就是第一个子表达式")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//([a-z]) 是第二个子表达式")]),s._v("\n")])])]),a("h5",{attrs:{id:"捕获和反捕获"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#捕获和反捕获"}},[s._v("#")]),s._v(" 捕获和反捕获")]),s._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("多个子表达式所匹配到的内容按顺序出现在内存的缓冲区中捕获数组，这个我们称为捕获\n")])])]),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" str "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'1adkk'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" reg"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token regex"}},[a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[s._v("/")]),a("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[s._v("(\\d)([a-z]*)")]),a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[s._v("/")]),a("span",{pre:!0,attrs:{class:"token regex-flags"}},[s._v("gi")])]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("reg"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("test")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("str"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n                console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v(" RegExp"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("$"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n                console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v(" RegExp"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("$"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n                console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v(" RegExp"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("$"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//输出结果：")]),s._v("\n "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("\n adkk\n \n")])])]),a("h5",{attrs:{id:"贪婪匹配"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#贪婪匹配"}},[s._v("#")]),s._v(" 贪婪匹配")]),s._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("贪婪匹配：当正则表达式中包含能接受重复的限定符时，\n通常的行为是（在使整个表达式能得到匹配的前提下）匹配尽可能多的字符，这匹配方式叫做贪婪匹配。\n")])])]),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" str "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'1adkk adkkk adkkkk'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" reg "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token regex"}},[a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[s._v("/")]),a("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[s._v("([a-z]){4,6}")]),a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[s._v("/")]),a("span",{pre:!0,attrs:{class:"token regex-flags"}},[s._v("gi")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" result "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" str"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("match")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("reg"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("result"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    \n输出结果：  \n    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"adkk"')]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"adkkk"')]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"adkkkk"')]),s._v("\n")])])]),a("h5",{attrs:{id:"懒惰匹配-非贪婪匹配"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#懒惰匹配-非贪婪匹配"}},[s._v("#")]),s._v(" 懒惰匹配（非贪婪匹配）")]),s._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("当正则表达式中包含能接受重复的限定符时，通常的行为是\n（在使整个表达式能得到匹配的前提下）匹配尽可能少的字符，这匹配方式叫做懒惰匹配。\n")])])]),a("h6",{attrs:{id:"懒惰量词是在贪婪量词后面加个"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#懒惰量词是在贪婪量词后面加个"}},[s._v("#")]),s._v(" 懒惰量词是在贪婪量词后面加个"),a("code",[s._v("?")])]),s._v(" "),a("ul",[a("li",[a("code",[s._v("*?")]),s._v(": 重复多次，但是尽可能少重复")]),s._v(" "),a("li",[a("code",[s._v("+?")]),s._v(": 重复1次，但是尽可能少重复")]),s._v(" "),a("li",[a("code",[s._v("??")]),s._v(": 重复0次、1次，但是尽可能少重复")]),s._v(" "),a("li",[a("code",[s._v("{n,m}?")]),s._v(": 重复n~m次，但是尽可能少重复")]),s._v(" "),a("li",[a("code",[s._v("{n,}?")]),s._v(": 重复n次以上，但是尽可能少重复")])])])}),[],!1,null,null,null);t.default=n.exports}}]);